import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as l}from"./app-CO05rnRn.js";const t="/assets/1665371585848-2cbc1409-59c1-4a1f-b64a-ebdb053582dc-ClMmsFWZ.png",h="/assets/1667827219132-578867cd-28f1-4cd6-9750-38d6201c4264-DgLDt0vj.png",k="/assets/1667827414032-36d3cd60-a238-4032-ad0b-d8e939db4b8f-KRNYuUFm.png",p={};function e(d,i){return l(),a("div",null,[...i[0]||(i[0]=[n('<h1 id="字符的编码格式" tabindex="-1"><a class="header-anchor" href="#字符的编码格式"><span>字符的编码格式</span></a></h1><h2 id="_1、ansi" tabindex="-1"><a class="header-anchor" href="#_1、ansi"><span>1、ANSI</span></a></h2><p>ANSI不是某一种特定的字符编码，而是在不同的系统中，ANSI表示不同的编码。</p><p>英文系统的ANSI为ASCII编码，中文简体系统的ANSI编码为GBK编码，中文繁体系统的ANSI编码为Big-5编码。</p><h2 id="_2、unicode" tabindex="-1"><a class="header-anchor" href="#_2、unicode"><span>2、Unicode</span></a></h2><p>Unicode是字符集。统一码。</p><p>UTF-8、UTF-16都是Unicode的一种实现。</p><h3 id="_2-1-utf-8" tabindex="-1"><a class="header-anchor" href="#_2-1-utf-8"><span>2.1 UTF-8</span></a></h3><p>UTF-8是1~4个字节的变长编码，相对来说最节省空间。</p><ul><li>不同范围的码点值使用不同长度的编码</li><li>字节编码总长度为1时前缀为0、总长度为2时前缀为110、总长度为3时前缀为1110、总长度为4时前缀为11110</li><li>除了首个字节，字节编码中其余字节的前缀为10</li></ul><p><img src="'+t+'" alt="img"></p><h3 id="_2-2-utf-16" tabindex="-1"><a class="header-anchor" href="#_2-2-utf-16"><span>2.2 UTF-16</span></a></h3><p>UTF-16中16的意思是16个bit的意思，也就是说是用16位来存储的，但是它比较奇葩，它使用了2个或者4个字节来存储。</p><p>对于 Unicode 编号范围在 0 ~ FFFF 之间的字符，UTF-16 使用两个字节存储，并且直接存储 Unicode 编号，不用进行编码转换。</p><p>对于 Unicode 编号范围在 10000~10FFFF 之间的字符，UTF-16 使用四个字节存储，具体来说就是：将字符编号的所有比特位分成两部分，较高的一些比特位用一个值介于 D800~DBFF 之间的双字节存储，较低的一些比特位（剩下的比特位）用一个值介于 DC00~DFFF 之间的双字节存储。</p><p><img src="'+h+'" alt="img"></p><h2 id="_3、char和wchar-t" tabindex="-1"><a class="header-anchor" href="#_3、char和wchar-t"><span>3、char和wchar_t</span></a></h2><p>char采用单字节存储，中文系统上的char*字符串编码格式实际上是ansi的gbk编码；</p><p>wchar_t为宽字符，采用双字节存储，wchar_t*字符串编码格式实际上是unicode的utf-16编码。</p><p>windows上的转码函数：</p><ul><li>WideCharToMultiByte()：unicode字符串（wchar_t*）按照给定的编码格式转化为多字节字符串。</li><li>MultiByteToWideChar()：将给定编码格式的多字节字符串转化为unicdeo字符串。</li></ul><p>给定的编码格式可以为：</p><ul><li>CP_ACP：ANSI编码</li><li>CP_UTF8：UTF-8编码</li></ul><p>例子：</p><p>“你们好”：这三个字符的各种编码为：</p><p>（汉字字符集编码查询：https://www.qqxiuzi.cn/bianma/zifuji.php）</p><p><img src="'+k+`" alt="img"></p><h2 id="_4、windows编码转换" tabindex="-1"><a class="header-anchor" href="#_4、windows编码转换"><span>4、windows编码转换</span></a></h2><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 实现gbk转utf-8</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::string gbk_data </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;你们好&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> gbk_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 将字符串以16进制输出</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StrHex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(gbk_data, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">gbk_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //得到的16进制串为：C4E3 C3C7 BAC3（对应了gbk编码）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // gbk转utf16</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DWORD dwlen </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MultiByteToWideChar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(CP_ACP, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">gbk_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">c_str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (dwlen </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    TCHAR</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> utf16_data </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[dwlen </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    MultiByteToWideChar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(CP_ACP, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">gbk_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">c_str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, utf16_data, dwlen);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StrHex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(utf16_data, dwlen) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 得到的16进制串为：4F60 4EEC 597D（对应了utf16编码）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // utf16转utf8</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    DWORD dwlen2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WideCharToMultiByte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(CP_UTF8, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (LPCWSTR)utf16_data, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (dwlen2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    char*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> utf8_data </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[dwlen2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    WideCharToMultiByte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(CP_UTF8, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (LPCWSTR)utf16_data, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, utf8_data, dwlen2, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StrHex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(utf8_data, dwlen2) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::endl;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 得到的16进制串为：E4BDA0 E4BBAC E5A5BD（对应了utf8编码）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29)])])}const B=s(p,[["render",e]]),g=JSON.parse('{"path":"/Study/%E9%9A%8F%E7%AC%94/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F.html","title":"字符的编码格式","lang":"zh-CN","frontmatter":{"description":"字符的编码格式 1、ANSI ANSI不是某一种特定的字符编码，而是在不同的系统中，ANSI表示不同的编码。 英文系统的ANSI为ASCII编码，中文简体系统的ANSI编码为GBK编码，中文繁体系统的ANSI编码为Big-5编码。 2、Unicode Unicode是字符集。统一码。 UTF-8、UTF-16都是Unicode的一种实现。 2.1 UT...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字符的编码格式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-02T16:49:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"灰灰烟影\\",\\"url\\":\\"http://hugo.work\\"}]}"],["meta",{"property":"og:url","content":"http://hugo.work/Study/%E9%9A%8F%E7%AC%94/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"灰灰烟影"}],["meta",{"property":"og:title","content":"字符的编码格式"}],["meta",{"property":"og:description","content":"字符的编码格式 1、ANSI ANSI不是某一种特定的字符编码，而是在不同的系统中，ANSI表示不同的编码。 英文系统的ANSI为ASCII编码，中文简体系统的ANSI编码为GBK编码，中文繁体系统的ANSI编码为Big-5编码。 2、Unicode Unicode是字符集。统一码。 UTF-8、UTF-16都是Unicode的一种实现。 2.1 UT..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-02T16:49:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-02T16:49:15.000Z"}]]},"git":{"createdTime":1748882955000,"updatedTime":1748882955000,"contributors":[{"name":"HooYing","username":"HooYing","email":"1161844396@qq.com","commits":1,"url":"https://github.com/HooYing"}]},"readingTime":{"minutes":2.63,"words":790},"filePathRelative":"Study/随笔/字符的编码格式.md","excerpt":"","autoDesc":true}');export{B as comp,g as data};
